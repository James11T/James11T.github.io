{"version":3,"sources":["hooks/useGame.tsx","components/gridTile/GridTile.tsx","components/board/Board.tsx","App.tsx","index.tsx","components/gridTile/GridTile.module.css","components/board/Board.module.css"],"names":["Tile","isMine","isFlagged","isRevealed","value","this","difficultyMap","easy","grid","mineCount","width","height","hasFailed","hasWon","difficulty","flagCount","minesSet","medium","hard","safeIndex","x","y","length","setGridValues","forEach","column","tile","xOffset","yOffset","adjacentTile","getTileValue","revealAround","gameReducer","state","action","type","difficulity","defaultState","columns","push","getGrid","minesPlaced","randomColumn","Math","floor","random","randomRow","abs","setMines","count","getRevealCount","useGame","React","useReducer","gameState","updateGameState","resetGame","useCallback","revealTile","flagTile","content","className","onClick","onRightClick","useState","isPressed","setIsPressed","timerId","useRef","onPressStart","current","window","setTimeout","onPressEnd","isLong","clearTimeout","toString","styles","clear","flag","blank","cn","mine","onMouseDown","event","button","onTouchStart","onMouseUp","onTouchEnd","onMouseLeave","onContextMenu","preventDefault","Overlay","text","children","overlay","Board","str","onTileClick","onTileRightClick","gameArea","gameData","replace","word","charAt","toUpperCase","substring","toLowerCase","spacer","name","id","onChange","target","map","GridTile","App","useEffect","root","document","getElementById","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.c546ba83.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Tile {\r\n  public isMine: boolean;\r\n  public isFlagged: boolean;\r\n  public isRevealed: boolean;\r\n  public value: number | null;\r\n\r\n  constructor(isMine: boolean) {\r\n    this.isMine = isMine;\r\n    this.isFlagged = false;\r\n    this.isRevealed = false;\r\n    this.value = null;\r\n  }\r\n}\r\n\r\nexport type Difficulty = \"easy\" | \"medium\" | \"hard\";\r\n\r\nexport interface GameState {\r\n  grid: Tile[][];\r\n  mineCount: number;\r\n  width: number;\r\n  height: number;\r\n  hasFailed: boolean;\r\n  hasWon: boolean;\r\n  difficulty: Difficulty;\r\n  flagCount: number;\r\n  minesSet: boolean;\r\n}\r\n\r\nconst defaultStateEasy: GameState = {\r\n  grid: [[]],\r\n  mineCount: 10,\r\n  width: 10,\r\n  height: 8,\r\n  hasFailed: false,\r\n  hasWon: false,\r\n  difficulty: \"easy\",\r\n  flagCount: 0,\r\n  minesSet: false\r\n};\r\n\r\nconst defaultStateMedium: GameState = {\r\n  grid: [[]],\r\n  mineCount: 40,\r\n  width: 18,\r\n  height: 14,\r\n  hasFailed: false,\r\n  hasWon: false,\r\n  difficulty: \"medium\",\r\n  flagCount: 0,\r\n  minesSet: false\r\n};\r\n\r\nconst defaultStateHard: GameState = {\r\n  grid: [[]],\r\n  mineCount: 99,\r\n  width: 24,\r\n  height: 20,\r\n  hasFailed: false,\r\n  hasWon: false,\r\n  difficulty: \"hard\",\r\n  flagCount: 0,\r\n  minesSet: false\r\n};\r\n\r\nconst difficultyMap = {\r\n  easy: defaultStateEasy,\r\n  medium: defaultStateMedium,\r\n  hard: defaultStateHard\r\n};\r\n\r\n/* Get a tile from the grid, if the corrdinates are out of bound, return null */\r\nconst safeIndex = (grid: Tile[][], x: number, y: number) => {\r\n  if (x < 0 || x >= grid.length) return null;\r\n  if (y < 0 || y >= grid[x].length) return null;\r\n\r\n  return grid[x][y];\r\n};\r\n\r\n/* Count the ammount of mines around a given tile */\r\nconst getTileValue = (grid: Tile[][], x: number, y: number) => {\r\n  const tile = grid[x][y];\r\n\r\n  if (tile.isMine) return null;\r\n\r\n  let value = 0;\r\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\r\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\r\n      // Iterate around the adjacent tiles\r\n      if (xOffset === 0 && yOffset === 0) continue; // Dont count the tile itself\r\n      const adjacentTile = safeIndex(grid, x + xOffset, y + yOffset);\r\n      if (!adjacentTile) continue;\r\n\r\n      if (adjacentTile.isMine) value++;\r\n    }\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\n/* Generate a grid of tiles with a given width and height */\r\nconst getGrid = (width: number, height: number) => {\r\n  const columns = [];\r\n  for (let x = 0; x < width; x++) {\r\n    const column = [];\r\n    for (let y = 0; y < height; y++) {\r\n      column.push(new Tile(false));\r\n    }\r\n    columns.push(column);\r\n  }\r\n\r\n  return columns;\r\n};\r\n\r\n/* Calculate and set the value of each tile */\r\nconst setGridValues = (grid: Tile[][]) => {\r\n  grid.forEach((column, x) => {\r\n    column.forEach((tile, y) => {\r\n      tile.value = getTileValue(grid, x, y);\r\n    });\r\n  });\r\n};\r\n\r\n/* Randomly set an exact number of mines on the grid at least 2 tiles from the start position */\r\nconst setMines = (grid: Tile[][], mineCount: number, x: number, y: number) => {\r\n  let minesPlaced = 0;\r\n\r\n  while (minesPlaced < mineCount) {\r\n    const randomColumn = Math.floor(Math.random() * grid.length);\r\n    const randomRow = Math.floor(Math.random() * grid[randomColumn].length);\r\n\r\n    if (Math.abs(randomColumn - x) <= 1 && Math.abs(randomRow - y) <= 1)\r\n      continue; // Dont place mines within 1 tile of the tile clicked\r\n\r\n    if (grid[randomColumn][randomRow].isMine) continue; // Tile is already a mine\r\n\r\n    grid[randomColumn][randomRow].isMine = true;\r\n    minesPlaced++;\r\n  }\r\n\r\n  setGridValues(grid);\r\n};\r\n\r\n/* Reveal all tiles around a given tile that are not mines */\r\nconst revealAround = (grid: Tile[][], x: number, y: number) => {\r\n  for (let xOffset = -1; xOffset <= 1; xOffset++) {\r\n    for (let yOffset = -1; yOffset <= 1; yOffset++) {\r\n      if (xOffset === 0 && yOffset === 0) continue; // Skip the tile itself\r\n\r\n      const adjacentTile = safeIndex(grid, x + xOffset, y + yOffset);\r\n\r\n      if (!adjacentTile) continue;\r\n      if (adjacentTile.isMine) continue;\r\n      if (adjacentTile.isRevealed) continue;\r\n      adjacentTile.isRevealed = true;\r\n\r\n      if (!adjacentTile.value) revealAround(grid, x + xOffset, y + yOffset); // Recurively flood the grid\r\n    }\r\n  }\r\n};\r\n\r\n/* Count the ammount of revealed tiles on the grid */\r\nconst getRevealCount = (grid: Tile[][]) => {\r\n  let count = 0;\r\n  grid.forEach((column) => {\r\n    column.forEach((tile) => {\r\n      if (tile.isRevealed) count++;\r\n    });\r\n  });\r\n  return count;\r\n};\r\n\r\ntype GameAction =\r\n  | { type: \"reset\"; difficulty?: Difficulty }\r\n  | { type: \"reveal\"; x: number; y: number }\r\n  | { type: \"flag\"; x: number; y: number };\r\n\r\nconst gameReducer = (state: GameState, action: GameAction) => {\r\n  switch (action.type) {\r\n    case \"reset\": {\r\n      const difficulity = action.difficulty || state.difficulty; // Default to the current difficulty\r\n      const defaultState = difficultyMap[difficulity];\r\n      const grid = getGrid(defaultState.width, defaultState.height);\r\n\r\n      // Does not place mines, must be done manually\r\n\r\n      return { ...defaultState, grid };\r\n    }\r\n    case \"reveal\": {\r\n      if (!state.minesSet)\r\n        setMines(state.grid, state.mineCount, action.x, action.y); // Mines have not been placed\r\n\r\n      const tile = state.grid[action.x][action.y];\r\n      if (tile.isFlagged) return state;\r\n\r\n      tile.isRevealed = true;\r\n      if (tile.isMine) return { ...state, hasFailed: true };\r\n      if (!tile.value) revealAround(state.grid, action.x, action.y);\r\n\r\n      const hasWon =\r\n        getRevealCount(state.grid) ===\r\n        state.width * state.height - state.mineCount; // Set has won if the player has revealed all non mine tiles\r\n\r\n      return {\r\n        ...state,\r\n        hasWon,\r\n        minesSet: true\r\n      };\r\n    }\r\n    case \"flag\": {\r\n      const tile = state.grid[action.x][action.y];\r\n      if (tile.isRevealed) return state;\r\n\r\n      tile.isFlagged = !tile.isFlagged;\r\n      if (tile.isFlagged) {\r\n        // New flag placed\r\n        return { ...state, flagCount: state.flagCount + 1 };\r\n      } else {\r\n        // Flag removed\r\n        return { ...state, flagCount: state.flagCount - 1 };\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst useGame = () => {\r\n  const [gameState, updateGameState] = React.useReducer(\r\n    gameReducer,\r\n    difficultyMap.easy\r\n  );\r\n\r\n  const resetGame = React.useCallback(\r\n    (difficulty?: Difficulty) =>\r\n      updateGameState({\r\n        type: \"reset\",\r\n        difficulty: difficulty || gameState.difficulty\r\n      }),\r\n    [gameState.difficulty]\r\n  );\r\n\r\n  const revealTile = React.useCallback(\r\n    (x: number, y: number) => updateGameState({ type: \"reveal\", x, y }),\r\n    []\r\n  );\r\n\r\n  const flagTile = React.useCallback(\r\n    (x: number, y: number) => updateGameState({ type: \"flag\", x, y }),\r\n    []\r\n  );\r\n\r\n  return { gameState, resetGame, revealTile, flagTile };\r\n};\r\n\r\nexport default useGame;\r\nexport { Tile };\r\n","import cn from \"classnames\";\r\nimport React from \"react\";\r\nimport { Tile as TileType } from \"../../hooks/useGame\";\r\nimport styles from \"./GridTile.module.css\";\r\n\r\nconst DEBUG_ENABLED = false;\r\nconst FLAG = \"⚑\";\r\n\r\ninterface Props {\r\n  tile: TileType;\r\n  onClick: () => void;\r\n  onRightClick: () => void;\r\n}\r\n\r\nconst Tile = ({ tile, onClick, onRightClick }: Props): JSX.Element => {\r\n  const [isPressed, setIsPressed] = React.useState(false);\r\n  const timerId = React.useRef<number | null>(null);\r\n\r\n  const handleRightClick = (event: React.MouseEvent): void => {\r\n    event.preventDefault();\r\n    onRightClick();\r\n  };\r\n\r\n  const onPressStart = () => {\r\n    setIsPressed(true);\r\n    timerId.current = window.setTimeout(() => {\r\n      onPressEnd(true);\r\n    }, 300);\r\n  };\r\n\r\n  const onPressEnd = (isLong = false) => {\r\n    if (!isPressed && !isLong) return;\r\n    timerId.current && window.clearTimeout(timerId.current);\r\n\r\n    if (isLong) {\r\n      onRightClick();\r\n    } else {\r\n      onClick();\r\n    }\r\n\r\n    setIsPressed(false);\r\n  };\r\n\r\n  let content: string;\r\n  let className: string;\r\n\r\n  if (tile.isRevealed) {\r\n    if (tile.value) {\r\n      content = tile.value.toString();\r\n      className = styles[`tile-number-${tile.value}`];\r\n    } else {\r\n      content = \"\";\r\n      className = styles.clear;\r\n    }\r\n  } else if (tile.isFlagged) {\r\n    content = FLAG;\r\n    className = styles.flag;\r\n  } else {\r\n    content = \"\";\r\n    className = styles.blank;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        styles.tile,\r\n        className,\r\n        tile.isMine && tile.isRevealed && styles.mine,\r\n        tile.isMine && DEBUG_ENABLED && styles.debugMine\r\n      )}\r\n      onMouseDown={(event: React.MouseEvent) =>\r\n        event.button === 0 && onPressStart()\r\n      }\r\n      onTouchStart={() => onPressStart()}\r\n      onMouseUp={(event: React.MouseEvent) =>\r\n        event.button === 0 && onPressEnd()\r\n      }\r\n      onTouchEnd={() => onPressEnd()}\r\n      onMouseLeave={() => onPressEnd()}\r\n      onContextMenu={handleRightClick}>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport { Difficulty, GameState } from \"../../hooks/useGame\";\r\nimport GridTile from \"../gridTile/GridTile\";\r\nimport styles from \"./Board.module.css\";\r\n\r\ninterface Props {\r\n  gameState: GameState;\r\n  onTileClick: (x: number, y: number) => void;\r\n  onTileRightClick: (x: number, y: number) => void;\r\n  resetGame: (difficulty?: Difficulty) => void;\r\n}\r\n\r\ninterface OverlayProps {\r\n  resetGame: (difficulty?: Difficulty) => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst titleCase = (str: string) =>\r\n  str.replace(\r\n    /\\w\\S*/g,\r\n    (word) => word.charAt(0).toUpperCase() + word.substring(1).toLowerCase()\r\n  );\r\n\r\nconst Overlay = ({ resetGame, children: text }: OverlayProps) => {\r\n  return (\r\n    <div className={styles.overlay}>\r\n      <h1>{text}</h1>\r\n      <button onClick={() => resetGame()}>Restart</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Board = ({\r\n  gameState,\r\n  onTileClick,\r\n  onTileRightClick,\r\n  resetGame\r\n}: Props) => {\r\n  const handleDiffictyChange = (\r\n    event: React.ChangeEvent<HTMLSelectElement>\r\n  ) => {\r\n    let value = event.target.value;\r\n\r\n    if (!(value === \"easy\" || value === \"medium\" || value === \"hard\")) return;\r\n\r\n    resetGame(value);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.gameArea}>\r\n      <div className={styles.gameData}>\r\n        <h1>Mineswepper</h1>\r\n        <div>Difficulty: {titleCase(gameState.difficulty)}</div>\r\n        <div>⚑ Mines left: {gameState.mineCount - gameState.flagCount}</div>\r\n        <div className={styles.spacer}></div>\r\n        <select\r\n          name=\"difficulty\"\r\n          id=\"difficultySelector\"\r\n          onChange={handleDiffictyChange}>\r\n          <option value=\"easy\">Easy</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"hard\">Hard</option>\r\n        </select>\r\n        <button onClick={() => resetGame()}>Reset</button>\r\n      </div>\r\n      <div className={styles.grid}>\r\n        {gameState.grid.map((column, x) => (\r\n          <div key={x} className={styles.column}>\r\n            {column.map((tile, y) => (\r\n              <GridTile\r\n                key={`${x},${y}`}\r\n                tile={tile}\r\n                onClick={() => onTileClick(x, y)}\r\n                onRightClick={() => onTileRightClick(x, y)}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n        {gameState.hasFailed && (\r\n          <Overlay resetGame={resetGame}>You Failed!</Overlay>\r\n        )}\r\n        {gameState.hasWon && <Overlay resetGame={resetGame}>You Won!</Overlay>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport useGame from \"./hooks/useGame\";\r\nimport Board from \"./components/board/Board\";\r\n\r\nfunction App() {\r\n  const { gameState, resetGame, revealTile, flagTile } = useGame();\r\n\r\n  React.useEffect(() => {\r\n    resetGame();\r\n  }, [resetGame]);\r\n\r\n  const handleTileClick = (x: number, y: number) => {\r\n    revealTile(x, y);\r\n  };\r\n\r\n  const handleTileFlag = (x: number, y: number) => {\r\n    flagTile(x, y);\r\n  };\r\n\r\n  return (\r\n    <Board\r\n      gameState={gameState}\r\n      onTileClick={handleTileClick}\r\n      onTileRightClick={handleTileFlag}\r\n      resetGame={resetGame}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = document.getElementById(\"root\") as HTMLElement;\n\nReactDOM.render(<App />, root);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"GridTile_tile__2Aa7x\",\"flag\":\"GridTile_flag__3xm2t\",\"blank\":\"GridTile_blank__3a3N0\",\"tile-number-1\":\"GridTile_tile-number-1__YJKR9\",\"tile-number-2\":\"GridTile_tile-number-2__2dJae\",\"tile-number-3\":\"GridTile_tile-number-3__8f8Vt\",\"tile-number-4\":\"GridTile_tile-number-4__f2pGo\",\"tile-number-5\":\"GridTile_tile-number-5__14Nay\",\"tile-number-6\":\"GridTile_tile-number-6__3hvkW\",\"tile-number-7\":\"GridTile_tile-number-7__1cN0b\",\"tile-number-8\":\"GridTile_tile-number-8__hiP61\",\"mine\":\"GridTile_mine__3FNYX\",\"debugMine\":\"GridTile_debugMine__LjcBo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Board_grid__BrGsz\",\"column\":\"Board_column__1ioUg\",\"overlay\":\"Board_overlay__2PJCg\",\"gameArea\":\"Board_gameArea__27p4E\",\"gameData\":\"Board_gameData__pIe6L\",\"spacer\":\"Board_spacer__1pQ7B\"};"],"sourceRoot":""}